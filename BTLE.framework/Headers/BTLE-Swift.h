// Generated by Apple Swift version 3.1 (swiftlang-802.0.48 clang-802.0.38)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import CoreBluetooth;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class CBCentralManager;
@class CBPeripheral;
@class NSNumber;
@class CBService;
@class CBCharacteristic;

SWIFT_CLASS("_TtC4BTLE7BTSmart")
@interface BTSmart : NSObject <CBPeripheralDelegate, CBCentralManagerDelegate>
@property (nonatomic) BOOL DEBUG_MODE;
@property (nonatomic, copy) NSString * _Nullable DataFromPeriperalAscii;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable DataFromPeriperalByteArray;
/// <hr/>
/// \code
///  * Function :   Initialize
///  * Input    :   none
///  * Output   :   none
///  * Comment  :   Initialize Central Manager To Handle all BLE Connections
///  *              TO Untegrate this library we have to start from here
///  *
///  *
///  ***************************************************************************
///
/// \endcode
- (void)InitializeWithCharacteristic:(NSString * _Nonnull)characteristic;
/// <hr/>
/// \code
///  * Function :   centralManagerDidUpdateState
///  * Input    :   CBCentralManager
///  * Output   :   none
///  * Comment  :   This function is fired on notifications
///  *              It gets fired, when there is a change is state
///  *
///  *
///  ***************************************************************************
///
/// \endcode
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
/// <hr/>
/// \code
///  * Function :   DidDiscoverPeripheral
///  * Input    :   none
///  * Output   :   none
///  * Comment  :   Notification Triggered When Peripheral Device Is Discovered
///  *
///  *
///  ***************************************************************************
///
/// \endcode
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
/// <hr/>
/// \code
///  * Function :   ConnectToPeripheralDevice
///  * Input    :   Device Name - String
///  * Output   :   none
///  * Comment  :   Connect to selected device specified by the user
///  *
///  *
///  ***************************************************************************
///
/// \endcode
- (void)ConnectToPeripheralDeviceWithDeviceName:(NSString * _Nonnull)deviceName;
/// <hr/>
/// \code
///  * Function :   DidFailToConnect
///  * Input    :   none
///  * Output   :   none
///  * Comment  :   Notification Triggered when Failed to connect to device
///  *
///  *
///  ***************************************************************************
///
/// \endcode
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
/// <hr/>
/// \code
///  * Function :   DidConnect
///  * Input    :   none
///  * Output   :   none
///  * Comment  :   Notification Triggered when connection to peripheral device is successfull
///  *
///  *
///  ***************************************************************************
///
/// \endcode
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
/// <hr/>
/// \code
///  * Function :   DidDiscoverServices
///  * Input    :   none
///  * Output   :   none
///  * Comment  :   Notification Triggered when services are discovered
///  *
///  *
///  ***************************************************************************
///
/// \endcode
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
/// <hr/>
/// \code
///  * Function :   DidDiscoverCharacteristicsForService
///  * Input    :   none
///  * Output   :   none
///  * Comment  :   Notification Triggered when characteristics are discovered. Then notifications are enabled for RX and TX
///  *
///  *
///  ***************************************************************************
///
/// \endcode
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
/// <hr/>
/// \code
///  * Function :   TransmitData
///  * Input    :   Byte Array : Hex Values in Decimal Number Format
///  * Output   :   none
///  * Comment  :   Notification gets triggered when there is incomming value from BT Module
///  *
///  *
///  ***************************************************************************
///
/// \endcode
- (void)TransmitDataWithByteArray:(NSArray<NSNumber *> * _Nonnull)byteArray;
/// <hr/>
/// \code
///  * Function :   DidUpdateValueForCharacteristic
///  * Input    :   none
///  * Output   :   none
///  * Comment  :   Notification gets triggered when there is incomming value from BT Module
///  *
///  *
///  ***************************************************************************
///
/// \endcode
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
/// <hr/>
/// \code
///  * Function :   didDisconnectPeripheral
///  * Input    :   none
///  * Output   :   none
///  * Comment  :   Notification Triggered when Peripheral Device Gets Disconnected
///  *              This notification gets triggered from Apple's Core Bluetooth Framework
///  *              We dont have control over how this notification gets triggered
///  ***************************************************************************
///
/// \endcode
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
/// <hr/>
/// \code
///  * Function :   Disconnect
///  * Input    :   none
///  * Output   :   none
///  * Comment  :   Disconnect From BT Module
///  *              This closes the connection between Peripheral and Central
///  *              Device
///  ***************************************************************************
///
/// \endcode
- (void)DisconnectFromBTModule;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC4BTLE9CoreBTLib")
@interface CoreBTLib : NSObject
@property (nonatomic) BOOL DEBUG_MODE;
@property (nonatomic) BOOL AUTO_CONNECT;
/// <hr/>
/// \code
///  * Function :   InitializeCoreBTLib
///  * Input    :   none
///  * Output   :   none
///  * Comment  :   Initialization checks for Pairing state with the light hub.
///  *              It tries to pair if not paired alread, establish connection
///  *              and finally enables the notifications for desired service characteristics
///  *
///  ***************************************************************************
///
/// \endcode
- (void)InitializeCoreBTLibWithCharacteristic:(NSString * _Nonnull)characteristic;
/// <hr/>
/// \code
///  * Function :   GetDeviceNames
///  * Input    :   none
///  * Output   :   Array of Strings
///  * Comment  :   Fetch all the devices saved in the Non Volatile Memory
///  *
///  *
///  ***************************************************************************
///
/// \endcode
- (NSArray<NSString *> * _Nullable)GetDeviceNames SWIFT_WARN_UNUSED_RESULT;
/// <hr/>
/// \code
///  * Function :   ConnectToDevice
///  * Input    :   Selected Device Name - String
///  * Output   :   none
///  * Comment  :   Sets which device to connect to and starts the paring/connection
///  *              process
///  *
///  ***************************************************************************
///
/// \endcode
- (void)ConnectToDeviceWithDeviceName:(NSString * _Nonnull)deviceName;
/// <hr/>
/// \code
///  * Function :   StartThroughputTests
///  * Input    :   None
///  * Output   :   None
///  * Comment  :   Start transmitting packets continously with specific time interval
///  *              This test function is intented for testing connection throughput
///  *
///  ***************************************************************************
///
/// \endcode
- (void)TransmitDataWithData:(NSArray<NSNumber *> * _Nonnull)data;
/// <hr/>
/// \code
///  * Function :   Read Data
///  * Input    :   None
///  * Output   :   [UInt8] Data Byte Array Recieved from Central Device
///  * Comment  :
///  *
///  *
///  ***************************************************************************
///
/// \endcode
- (NSArray<NSNumber *> * _Nullable)ReadData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#pragma clang diagnostic pop
